Extend 'fill' replace
    * -> Fill
    * noun -> Fill
    * noun noun -> Fill
    * noun 'from'/'with' noun -> Fill;

[FillSub space available;
    if (noun == nothing) print_ret "What do you intend to fill?";
    if (second == nothing) print_ret "Where do you intend to fill from?";
    if (noun hasnt fillable) print_ret "How do you expect to fill that?";
    if (second hasnt liquid or fillable) print_ret "You can't fill from here.";

    if (second has fillable) {
        space = noun.volume - noun.contents;
        available = space;
        if (second.contents < space) available = second.contents;

        noun.contents = noun.contents + available;
        second.contents = second.contents - available;
    }
    else
        noun.contents = noun.volume;

    print_ret "You fill ", (the) noun, " from ", (the) second, ".";
];

[PourSub;
    if (noun == nothing) print_ret "What do you intend to pour?";
    if (noun hasnt fillable) print_ret "What do you intend to pour?";

    noun.contents = 0;
    print_ret "You pour the contents of ", (the) noun, " on to the ground.^
        It's now empty.";
];

Verb 'pour' 'spill'
    * -> Pour
    * noun -> Pour;

[SnuffSub;
    print_ret "Well, that doesn't need extinguishing.";
];

Verb 'snuff' 'extinguish' 'put out' 'douse'
    * -> Snuff
    * noun -> Snuff
    * noun 'with'/'using' noun -> Snuff;

[CutSub;
    if (~~(noun provides cuttable && noun.cuttable))
        return L__M(##Cut,1,noun);
    if (second) {
        if (~~(second provides cutter && second.cutter))
            print_ret (The) second, " can't cut anything.";
    }
    else
        "You need to specify a sharp implement.";
    if (AfterRoutines() || keep_silent) rtrue;
    "You make a small incision in ", (the) noun, ".";
];

Extend 'cut'
    * noun 'with' noun  -> Cut;

[BlowSub;
    if (~~(noun has blowable))
        return L__M(##Blow,1,noun);
    if (second) {
        if (~~(second has blow_target))
            print_ret "Not sure why you would want to blow at that.";
    }
    else
        "You whistle a pleasant tune.";
    if (AfterRoutines() || keep_silent) rtrue;
    "You blow ", (the) noun, " at ", (the) second, ".";
];

Extend 'blow'
    * noun 'at'/'in'/'towards' noun -> Blow;

[GreetSub;
    if (~~(noun provides greeted)) print_ret "You can't greet that.";
    if (noun.greeted) print_ret (the) noun, " says hello again.";
    noun.greeted = true;
    noun.greeting();
];

Verb 'greet' 'hello'
    * creature -> Greet;

[TalkSub;
    if (noun == player) print_ret "Nothing you hear surprises you.";
    if (RunLife(noun,##Talk) ~= false) return;      ! Adds the talk action to the NPC life property.
    print_ret "At the moment, you can't think of anything to say.";
];

Verb 'talk' 't//' 'converse' 'chat' 'gossip'
    * 'to'/'with' creature  -> Talk
    * creature -> Talk;

[HTMLInventorySub i;
	if (IsVorpleSupported()) {
		! L__M(##Inv, 2);     ! for 6/11 and 6/12 compatibility

        VorpleTooltipMouse("You pat your pockets and find:^", "Items in your inventory can be manipulated.  Try different
                        verbs with items you've picked up.");

        if (child(player) == nothing) {
            ! VorpleOpenHtmlTag("p");
            print " nothing.";
            ! VorpleCloseHTMLTag();
        }

        VorpleOpenHtmlTag("ul", "inv");
		objectloop (i in player) {
                        VorpleOpenHtmlTag("li");
                        ! Create the examine command.
                        bp_output_stream(3, examineCommand, 300);
                        VorpleAttributeFlags = false;
                        print "examine ";
                        print (name) i;
                        VorpleAttributeFlags = true;
                        bp_output_stream(-3);

                        bp_output_stream(3, objectName, 300);
                        print (string) i.article;
                        print " ";
                        print (name) i;
                        bp_output_stream(-3);

                        VorpleLinkCommandText(examineCommand, objectName);
                        VorpleCloseHTMLTag();
		}
        VorpleCloseHTMLTag();
	}
	else { <<Inv>>; }
];

Extend 'inventory' first
*		->HTMLInventory;

[HelpSub;
    VorpleOpenHtmlTag("blockquote");
    VorpleOpenHtmlTag("p");
    print "This is a text adventure game, where you enter commands at the prompt.  A range of commands are available to you such as ";
    VorpleLinkCommandText("examine", "EXAMINE");
    print ", ";
    VorpleLinkCommandText("take", "TAKE");
    print ", ";
    VorpleLinkCommandText("put", "PUT");
    print ", ";
    VorpleLinkCommandText("talk", "TALK");
    print ", ";
    VorpleLinkCommandText("hello", "HELLO");
    print ", and ";
    VorpleLinkCommandText("say", "SAY");
    print ".  Some commands can be used on their own such as ";
    VorpleLinkCommandText("examine", "EXAMINE");
    print ", where others will require interacting with objects or characters, for examine ";
    VorpleLinkCommandText("put large amphora on scale", "PUT LARGE AMPHORA ON SCALE");
    print " or ";
    VorpleLinkCommandText("hello rodin", "HELLO RODIN");
    print ". The interpreter is good at working out what you want from natural language, so be explicit.  If you want to ";
    VorpleLinkCommandText("fill", "FILL");
    print " or ";
    VorpleLinkCommandText("light", "LIGHT");
    print " something, it helps to specify both subject and target.";
    VorpleCloseHTMLTag();
    VorpleOpenHtmlTag("p");
    print "You navigate between rooms using compass directions.  ";
    VorpleLinkCommandText("north", "NORTH");
    print ", ";
    VorpleLinkCommandText("south", "SOUTH");
    print ", ";
    VorpleLinkCommandText("east", "EAST");
    print " and ";
    VorpleLinkCommandText("west", "WEST");
    print ".  Each room description will tell you where you can move to.";
    VorpleCloseHTMLTag();
   VorpleOpenHtmlTag("p");
    print "The game is a collection of puzzles, that will require some experimentation to solve.  There's a range of puzzle
    types to solve here, do not assume that the same approach for one puzzle will work for the next.";
    VorpleCloseHTMLTag();
    VorpleOpenHtmlTag("p");
    print "If you get stuck in a room, it helps to ";
    VorpleLinkCommandText("look", "LOOK");
    print ", and really take in the description.";
    VorpleCloseHTMLTag();
    VorpleCloseHTMLTag();
];

Verb 'help'
    * -> Help;

[CheatSub;
    move player to middle_room;
];

Verb 'cheat'
    * -> Cheat;


[ NewEndPrompt ;
	print "^Would you like to ";
	VorpleLinkCommand("RESTART");
	print ", ";
	VorpleLinkCommand("RESTORE");	print " a saved game";
	#Ifdef DEATH_MENTION_UNDO;
	print ", ";
	VorpleLinkCommand("UNDO");
	print " your last move";
	#Endif;
	if (TASKS_PROVIDED == 0) {
		print ", give the "; VorpleLinkCommand("FULL"); print " score for that game";
	}
	if (deadflag == 2 && AMUSING_PROVIDED == 0) {
		print ", see some suggestions for "; VorpleLinkCommand("AMUSING"); print " things to do";
	}
        print " or "; VorpleLinkWebsiteText("https://github.com/kianryan/RubeRoomI6", "QUIT"); "?";
];

[ QuitSub; L__M(##Quit,2);
    VorpleLinkCommand("YES");
    print " ";
    VorpleLinkCommand("NO");
    if (YesOrNo()~=0)
    VorpleExecuteJavaScriptCommand("window.location.href='https://github.com/kianryan/RubeRoomI6'");
];