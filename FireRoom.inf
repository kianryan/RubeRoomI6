! Toggle adjacent lanterns on or off.
[
    Toggle lantern;
    if (lantern has light) {
        give lantern ~light;
        lantern.short_name();
        print_ret " goes out!";
    }
    if (lantern hasnt light) {
        give lantern light;
        lantern.short_name();
        print_ret " bursts in to flames!";
    }
];

! Have all lanterns in a room been lit
[
    AllLit par a o;
    a = true;
    objectloop(o in par) {
        if (o ofclass Lantern && o hasnt light) {
            a = false;
        }
    }
    return a;
];

PuzzleRoom fire_room "Northern Cavern"
    with description
        "The walls are bare, but warm to the touch.  As you take a closer
        look at the walls, you realise the rock here is different, possibly volcanic.  You
        run your hand over and almost cut yourself on the sharp edges.  In the centre of the
        room are five lanterns in a line.^^
        The paassage to the south leads back to the atrium.^^",
        win_description
        [;
            move fire_key to self;
            "With all the lanterns lit, you can see what you couldn't before.  In the middle
            of the room, lying on the floor amongst the rubble , is a piece of rock different
            from the others.  It's shaped like a rough cog, with a hole in the middle.";
        ],
        s_to cube_room;

Class Lantern
    with name 'lantern' 'lamp',
       short_name [;
           print (ordinal) self.index, " lantern";
           if (self has light) {
               print " (lit)";
           }
           return true;
       ],
       description [;
            print "A brass open cage holds an oiled wick.  You can smell the oil on the wick
            from a distance.^";
            if (self has light)
                print_ret "The lantern is lit with a modest flame that partially lights a
                section of the cave.  As the light dances, shadows play on the walls.";
            else
                print_ret "The lantern gives off no light.  It is warm to the touch and you
                can smell the oil on the wick.";
        ],
        before[;
        Burn:
            if (self has light) print_ret "Why, it's already lit?";
            if (match in player && second == match) {
                give self light;
                print "It takes a second, but the wick eventually takes the flame.^";
                Toggle(self.left);
                Toggle(self.right);

                if (AllLit(parent(self))) parent(self).win_room();
                rtrue;

            }
            print_ret "Light with what?";
        Snuff:
            if (self hasnt light) print_ret "Why, it's already out?";
            if (snuff in player && second == snuff) {
                give self ~light;
                print "You douse the flame, and room becomes a little darker.^";
                Toggle(self.left);
                Toggle(self.right);
                rtrue;
            }
            print_ret "Snuff with what?";
        ],

    has static;

! This may work with an array.

Lantern lantern1 fire_room
    with name 'first',
    with index 1,
    with left lantern5,
    with right lantern2;
Lantern lantern2 fire_room
    with name 'second',
    with index 2,
    with left lantern1,
    with right lantern3;
Lantern lantern3  fire_room
    with name 'third',
    with index 3,
    with left lantern2,
    with right lantern4;
Lantern lantern4 fire_room
    with name 'fourth',
    with index 4,
    with left lantern3,
    with right lantern5,
    has light;
Lantern lantern5 fire_room
    with name 'fifth',
    with index 5,
    with left lantern4,
    with right lantern1,
    has light;

! Magic match depends on if it's being held.
! It will not burn the user, but whilst being held, it will always be lit.
Object match "match" fire_room
    with name 'match',
    with description
        "It's a match.";

Object snuff "snuff" fire_room
    with name 'snuff' 'hood',
    with description
        "A plain brass snuff, with a long handle, used for extingusing lights.  The inside of the hood
        is sooted from use.";

